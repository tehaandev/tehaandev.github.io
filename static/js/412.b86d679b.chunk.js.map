{"version":3,"file":"static/js/412.b86d679b.chunk.js","mappings":"uMAsGA,QA7FA,YACEA,EAAAA,EAAAA,YAAU,KACRC,SAASC,MAJC,yBAIY,IAGxB,MAOMC,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KAAaE,SAAS,qBAC5BC,MAAOH,EAAAA,KACJE,SAAS,sBACTC,MAAM,qBACTC,MAAOJ,EAAAA,KACPK,aAAcL,EAAAA,KACdM,QAASN,EAAAA,KAAaE,SAAS,0BAGjC,OACEK,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mCAAkCC,UAChDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,UACIF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,cAExCF,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLC,cAxBc,CACpBX,KAAM,GACNE,MAAO,GACPC,MAAO,GACPC,aAAc,GACdC,QAAS,IAoBHO,SAAUC,UACR,MAAMC,EAAI,SAAAC,OAAY,IAAIC,KAAM,aAAAD,OAAYE,EAAOjB,KAAI,cAAAe,OAAaE,EAAOf,MAAK,cAAAa,OAAaE,EAAOd,MAAK,qBAAAY,OAAoBE,EAAOb,aAAY,gBAAAW,OAAeE,EAAOZ,SAChKa,OCvCQL,OAAOM,EAASd,KACxC,MAAMS,EAAO,CAAEK,QAASA,EAASd,QAASA,GAI1C,aAAae,EAAAA,EACVC,KAJY,qDAICP,GACbQ,MAAK,SAAUJ,GACd,OAAOA,EAASK,MAClB,IACCC,OAAM,SAAUC,GACf,OAAOA,EAAIP,SAASK,MACtB,GAAE,ED2B6BG,CACrB,iCACAZ,GAEc,KAAZI,GACFS,QAAQC,IAAIV,GACZtB,SAASiC,eAAe,qBAAqBC,UAC3C,uDAEFH,QAAQC,IAAIV,GACZtB,SAASiC,eAAe,qBAAqBC,UAAS,SAAAf,OAC3CG,EAAQ,uBACrB,EAEFpB,iBAAkBA,EAAiBU,SAElCA,KACCC,EAAAA,EAAAA,MAACsB,EAAAA,GAAI,CAAAvB,SAAA,EACHC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,QAAOC,SAAA,EACpBF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CAAChC,KAAK,OAAOiC,YAAY,UAC/B3B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAY,CAAClC,KAAK,OAAOmC,UAAU,eAGxC1B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,QAAOC,SAAA,EACpBF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CAAChC,KAAK,QAAQiC,YAAY,WAChC3B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAY,CAAClC,KAAK,QAAQmC,UAAU,eAGzC1B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,QAAOC,SAAA,EACpBF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CAAChC,KAAK,QAAQiC,YAAY,WAChC3B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAY,CAAClC,KAAK,QAAQmC,UAAU,eAGzC1B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,QAAOC,SAAA,EACpBF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CAAChC,KAAK,eAAeiC,YAAY,kBACvC3B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAY,CAAClC,KAAK,eAAemC,UAAU,eAGhD1B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,QAAOC,SAAA,EACpBF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CACJhC,KAAK,UACLmC,UAAU,WACVF,YAAY,aAEd3B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAY,CAAClC,KAAK,UAAUmC,UAAU,eAG3C7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CAACC,KAAK,SAASC,KAAK,iBAIjChC,EAAAA,EAAAA,KAAA,KAAGiC,GAAG,0BAId,C","sources":["components/Contact/Contact.jsx","services/api.service.js"],"sourcesContent":["import { Formik, Form, ErrorMessage, Field } from \"formik\";\nimport { useEffect } from \"react\";\nimport * as Yup from \"yup\";\nimport { publishSns } from \"../../services/api.service.js\";\nimport Button from \"../Button/Button.jsx\";\nimport \"./Contact.css\";\n\nconst TITLE = \"TP | Let's get in touch\";\n\nfunction Contact() {\n  useEffect(() => {\n    document.title = TITLE;\n  });\n\n  const initialValues = {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    organization: \"\",\n    message: \"\",\n  };\n  const validationSchema = Yup.object({\n    name: Yup.string().required(\"Name is required.\"),\n    email: Yup.string()\n      .required(\"Email is required.\")\n      .email(\"Email is invalid.\"),\n    phone: Yup.string(),\n    organization: Yup.string(),\n    message: Yup.string().required(\"Message is required.\"),\n  });\n\n  return (\n    <main className=\"container contact-form-container\">\n      <div className=\"sub-container\">\n        <h1>\n          Let's <span className=\"text-tertiary\">talk!</span>\n        </h1>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={async (values) => {\n            const body = `Date: ${new Date()} \\nName: ${values.name} \\nEmail: ${values.email} \\nPhone: ${values.phone} \\nOrganization: ${values.organization} \\nMessage: ${values.message}`;\n            const response = await publishSns(\n              \"Porfolio: New form submission.\",\n              body,\n            );\n            if (response == 201) {\n              console.log(response);\n              document.getElementById(\"submission-status\").innerHTML =\n                \"Submission Successful. Thank you for reaching out!\";\n            } else {\n              console.log(response);\n              document.getElementById(\"submission-status\").innerHTML =\n                `Error ${response}! Please try again.`;\n            }\n          }}\n          validationSchema={validationSchema}\n        >\n          {() => (\n            <Form>\n              <div className=\"field\">\n                <Field name=\"name\" placeholder=\"Name\" />\n                <div className=\"error-message\">\n                  <ErrorMessage name=\"name\" component=\"span\" />\n                </div>\n              </div>\n              <div className=\"field\">\n                <Field name=\"email\" placeholder=\"Email\" />\n                <div className=\"error-message\">\n                  <ErrorMessage name=\"email\" component=\"span\" />\n                </div>\n              </div>\n              <div className=\"field\">\n                <Field name=\"phone\" placeholder=\"Phone\" />\n                <div className=\"error-message\">\n                  <ErrorMessage name=\"phone\" component=\"span\" />\n                </div>\n              </div>\n              <div className=\"field\">\n                <Field name=\"organization\" placeholder=\"Organization\" />\n                <div className=\"error-message\">\n                  <ErrorMessage name=\"organization\" component=\"span\" />\n                </div>\n              </div>\n              <div className=\"field\">\n                <Field\n                  name=\"message\"\n                  component=\"textarea\"\n                  placeholder=\"Message\"\n                />\n                <div className=\"error-message\">\n                  <ErrorMessage name=\"message\" component=\"span\" />\n                </div>\n              </div>\n              <Button type=\"submit\" text=\"Submit\" />\n            </Form>\n          )}\n        </Formik>\n        <p id=\"submission-status\"></p>\n      </div>\n    </main>\n  );\n}\nexport default Contact;\n","import axios from \"axios\";\n\nexport const publishSns = async (subject, message) => {\n  const body = { subject: subject, message: message };\n  const apiURL = \"https://tehaandev-github-io-backend.vercel.app/sns\";\n  // const apiURL = \"http://localhost:3000/sns\";\n\n  return await axios\n    .post(apiURL, body)\n    .then(function (response) {\n      return response.status;\n    })\n    .catch(function (err) {\n      return err.response.status;\n    });\n};\n"],"names":["useEffect","document","title","validationSchema","Yup","name","required","email","phone","organization","message","_jsx","className","children","_jsxs","Formik","initialValues","onSubmit","async","body","concat","Date","values","response","subject","axios","post","then","status","catch","err","publishSns","console","log","getElementById","innerHTML","Form","Field","placeholder","ErrorMessage","component","Button","type","text","id"],"sourceRoot":""}